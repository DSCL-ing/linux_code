#include<iostream>
#include<pthread.h>

class Singleton
{
  public:
    Singleton* getInstance()
    {
      if(_instance == nullptr)
      {
        pthread_mutex_lock(&_mtx);
        if(_instance==nullptr) 
        {
          _instance = new Singleton();
        }
        pthread_mutex_unlock(&_mtx);
      }
      return _instance;
    }

  private:
    ~Singleton();
    Singleton();
    Singleton(const Singleton& s)=delete;
    Singleton& operator=(const Singleton& s)=delete;

  private:
    static Singleton* _instance;
    static pthread_mutex_t _mtx; 

};
static pthread_mutex_t _mtx = PTHREAD_MUTEX_INITIALIZER;

Singleton instance;



