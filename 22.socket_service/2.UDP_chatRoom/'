#pragma once

#include<iostream>
#include<string>
#include<functional>
#include<unordered_map>
#include<mutex>


#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>

#include<cerrno>
#include<cstring>
#include<cstdlib>

#include"err.hpp"
#include"ringQueue.hpp"
#include"Thread.hpp"

static const uint16_t default_port = 8080;
//using func_t = std::function<std::string(std::string)>;//using更好用
typedef std::function<std::string(std::string)> func_t;

class UdpServer
{
public:
  //UdpServer(std::string ip ,uint16_t port = default_port):port_(port),ip_(ip)
  UdpServer(func_t fun,uint16_t port = default_port):service_(fun),port_(port)
  {
      std::cout<<" , server port: " << port <<std::endl;
  }
  ~UdpServer()
  {

  }

  void InitServer()
  {
    //1. 打开socket接口,打开网络文件
    sock_ = socket(AF_INET,SOCK_DGRAM,0);
    if(sock_<0)
    {
      std::cout<<"create socket error :"<<strerror(errno)<<std::endl;
      exit(SOCKET_ERR);
    }
    std::cout<<"create socket success: " <<sock_<<std::endl;

    //1.5 现在本地给本地套接字字段指明IP和端口号Port 
    
    struct sockaddr_in local;
    memset(&local,0,sizeof(local));
    local.sin_family = AF_INET;
    local.sin_port = htons(port_);//主机转网络,16位短整数
    //local.sin_addr.s_addr = inet_addr(ip_.c_str());//需要把点分十进制转成uint32的IP地址类型  -- 虚拟机,物理机器版本
    
    //2.将准备好的本地套接字字段和网络文件套接字字段绑定
    int n = bind(sock_,(struct sockaddr*)&local,sizeof(local)); //sockaddr_in和sockaddr和sockaddr_un等大小是不一样的,所以把类型大小作参数传进来
    if(n < 0 )
    {
      std::cerr<<"bind socker error :"<<strerror(errno)<<std::endl;
      exit(BIND_ERR);
    }
    std::cout<<"bind socket success" << std::endl;
  }
 
  void addUser(std::string name,sockaddr_in peer)
  {
    if(m_.find(name)!=m_.end())
    {
      //m_.emplace(name,peer);//可变参数包+定位new推导,无需类型,
      //m_.insert(std::pair<std::string,sockaddr_in>(name,peer));//要写类型
      m_.insert(std::make_pair(name,peer));//无需写类型
    }
    else
    {

    }
    
    
  }

  void Recv()
  {


    char buffer[2048];
    while(true)
    {
      //1.接收
      struct sockaddr_in peer; //本地sockaddr,用于接收套接字地址
      socklen_t len = sizeof(peer);
      int  n = recvfrom(sock_,buffer,sizeof(buffer)-1,0,(struct sockaddr*)&peer,&len); 
      if(n>0)
      { 
        buffer[n] = '\0'; 
      }
      else
      {
        continue; 
      }
      
      rq_.push(buffer);

      std::string clientip = inet_ntoa(peer.sin_addr);
      uint16_t clientport = ntohs(peer.sin_port);
      //std::cout<<clientip << "-" <<clientport<<"# " <<buffer<<std::endl;
      //2.将收到的数据放入存储队列中 
      std::string username;
      username = clientip +"+"+ std::to_string(clientport);

      std::lock_guard<std::mutex> lock_guard(mtx_);
      addUser(username,peer);

       

     }  
  }

  void broadcast()
  {
    

    while(true)
    {
      std::string response;
      rq_.pop(&response);
    
      for(auto &v:m_)
      {
        sendto(sock_,response.c_str(),response.size(),0,(struct sockaddr*)&v.second,sizeof(v)); 
      }
    }

  }

   void Start()
  {
     
      
  }

private:
  int sock_;  //udp服务器自己的套接字
  func_t service_;
  uint16_t port_; //udp服务器自己的端口号
  
  RingQueue<std::string> rq_; //用于存放消息
  
  std::unordered_map<std::string,sockaddr_in> onlineuser;//用户数据
  std::mutex mtx_;


  //一般输入的IP都是点分十进制的.所以是字符串
  //std::string ip_; //服务器自己的IP --------------------- 云服务器版本不需要手动提供IP地址
}; // end  UdpServer









